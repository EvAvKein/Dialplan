.input {
	color: var(--textColor);
	background-color: var(--backgroundColor);
	box-sizing: border-box;
	width: 100%;
}
textarea.input {
	resize: vertical;
}
.input:focus {
	border-color: var(--highlightColor);
	outline: none;
}

.labelledInputWrapper {
	position: relative;
}

.labelledInputWrapper > .input {
	padding-top: 0.65em;
}

.input[type="color"] {
	box-sizing: content-box; /* for reasonable sizing inside labelledInput, as it adds padding-top to the input which otherwise squashes the color input */
	padding-inline: 0;
	padding-bottom: 0;
}

.inputLabel {
	position: absolute;
	top: 0em;
	left: 0.1em;
	font-size: 1.5em;
	color: var(--midColor);
	cursor: text;
	transition: all 250ms;
}
.input:focus + .inputLabel,
.input:not(:placeholder-shown) + .inputLabel,
.collapsedLabel {
	color: var(--textColor);
	text-decoration: underline var(--midColor);
	font-size: 0.65em;
	cursor: default;
	transition: all 150ms;
}

.labelledInputWrapper,
.input {
	border-left: 0em solid var(--textColor);
	transition: all 150ms ease-in-out;
}
.labelledInputWrapper:focus-within,
.input:focus {
	border-left-width: 0.2em;
}
.labelledInputWrapper > .input {
	border-left: none;
}

.labelledInputWrapper:has(> .input:user-invalid),
.input:user-invalid {
	border-color: var(--negativeColor);
}
.labelledInputWrapper:not(:focus-within):has(.input:user-invalid) {
	outline-offset: 0.1rem;
}
.labelledInputWrapper:not(:focus-within):has(.input:user-invalid),
.input:user-invalid:not(:focus) {
	outline: 0.15rem solid var(--negativeColor);
}
