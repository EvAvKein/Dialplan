.input {
	color: var(--textColor);
	background-color: var(--backgroundColor);
	box-sizing: border-box;
	width: 100%;
}
textarea.input {
	resize: vertical;
}
.input:focus {
	border-color: var(--highlightColor);
	outline: none;
}

.input[type="color"] {
	box-sizing: content-box; /* for reasonable sizing inside labelledInput, as it adds padding-top to the input which otherwise squashes the color input */
	padding-inline: 0;
	padding-bottom: 0;
}

.labelWrapper {
	position: relative;
}

.label {
	position: absolute;
	top: 0em;
	left: 0.1em;
	font-size: 1.5em;
	color: var(--midColor);
	cursor: text;
	transition: all 250ms;
}
.labelWrapper:focus-within .label,
.labelWrapper :first-child:not(:placeholder-shown) + .label,
.collapsedLabel {
	color: var(--textColor);
	text-decoration: underline var(--midColor);
	font-size: 0.65em;
	cursor: default;
	transition: all 150ms;
}

.labelWrapper :first-child {
	padding-top: 0.65em;
}

.labelWrapper,
.input {
	border-left: 0em solid var(--textColor);
	transition: all 150ms ease-in-out;
}
.labelWrapper:focus-within,
.input:focus {
	border-left-width: 0.2em;
}
.labelWrapper > .input {
	border-left: none;
}

/* not styling via the `:invalid`/`:user-invalid` selectors because:
	 1. the `pattern` attribute doesn't work for some input types (e.g. number)
	 2. i'd like to have the option to use custom validation logic
	 3. this aria attribute should be added anyway, and styling through the attributes makes it much harder to forget about it
*/
.labelWrapper:has([aria-invalid="true"]),
.input[aria-invalid="true"] {
	border-color: var(--negativeColor);
}
.labelWrapper:not(:focus-within):has([aria-invalid="true"]) {
	outline-offset: 0.1rem;
}
.labelWrapper:not(:focus-within):has([aria-invalid="true"]),
.input[aria-invalid="true"]:not(:focus) {
	outline: 0.15rem solid var(--negativeColor);
}
